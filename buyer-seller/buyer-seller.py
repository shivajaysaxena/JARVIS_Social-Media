# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-kXxZ5-11ses0ovTMVqMm7jV6b4hUbam
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load the data
file_path = 'data.csv'  # Replace with the path to your file
data = pd.read_csv(file_path)

# Reshape data into a 'text' and 'label' format
buyer_data = pd.DataFrame({
    'text': data['buyer_phrases'],
    'label': 'buyer'
})

seller_data = pd.DataFrame({
    'text': data['seller_phrases'],
    'label': 'seller'
})

# Combine into a single dataset
classification_data = pd.concat([buyer_data, seller_data], ignore_index=True)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(
    classification_data['text'], classification_data['label'], test_size=0.2, random_state=42
)

# Convert text data to a bag-of-words representation
vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Initialize and train a Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train_vec, y_train)

# Predict on the test set
y_pred = model.predict(X_test_vec)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

# Print the results
print(f'Accuracy: {accuracy * 100:.2f}%')
print('Classification Report:\n', classification_rep)

# Example: Predicting the category of a custom text phrase
example_text = ["Can you do a bulk deal?", "Iâ€™ll bring the best product."]

# Transform the example text using the same vectorizer
example_text_vec = vectorizer.transform(example_text)

# Predict and display the results
predictions = model.predict(example_text_vec)
for text, prediction in zip(example_text, predictions):
    print(f"Phrase: '{text}' is classified as: {prediction}")